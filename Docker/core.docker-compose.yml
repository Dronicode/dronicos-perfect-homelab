version: '3.9'

########################### NETWORKS
networks:
  proxy_traefik:
    name: proxy_traefik
    external: true
  macvlan_01:
    name: macvlan_01
    external: true

########################### SERVICES
services:
  traefik: # Traefik 2 - Reverse Proxy
    image: traefik:2.10
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      proxy_traefik:
        ipv4_address: ${TRAEFIK_IP}
    ports: # Don't use 8080, is for insecure API only
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/dynamic-configs:/dynamic-configs
      - ./config/traefik/traefik.yml:/traefik.yml
      - ./logs/traefik:/logs/
      - ./private/acme.json:/acme.json
      - ./private/.htpasswd:/.htpasswd
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
    command: #CLI arguments - static config, use EITHER this, or traefik.yml
      - '--configFile=/traefik.yml'
    labels: # Dynamic config, can combine with /traefik-dynamic/*
      - 'traefik.enable=true'
      # HTTP-to-HTTPS Redirect
      - 'traefik.http.routers.http-catchall.entrypoints=web'
      - 'traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)'
      - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=websecure'
      ### Routers
      - 'traefik.http.routers.traefik-rtr.entrypoints=websecure'
      - 'traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN}`)'
      - 'traefik.http.routers.traefik-rtr.tls=true'
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN}'
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN}'
      - 'traefik.http.routers.traefik-rtr.tls.certresolver=${CERT_RESOLVER}' # Comment out this line after first run of traefik to force the use of wildcard certs
      ## Middlewares
      - 'traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file'
      # - 'traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.$DOMAIN'
      # - 'traefik.http.middlewares.traefik-headers.headers.sslforcehost=true'
      ### Services
      - 'traefik.http.routers.traefik-rtr.service=api@internal'

  portainer: # Portainer - WebUI for Containers
    image: portainer/portainer-ce:linux-arm64
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - traefik
    networks:
      proxy_traefik:
        ipv4_address: ${PORTAINER_IP}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy and comment this line out, for improved security.
      - $DOCKERDIR/services/portainer/data:/data
    environment:
      - TZ=${TZ}
    command: -H unix:///var/run/docker.sock # Use this or Docker Socket Proxy
    # command: -H tcp://socket-proxy:2375 # Use if Socket Proxy enabled.
    labels:
      - 'traefik.enable=true'
      ## Frontend
      ## Routers
      - 'traefik.http.routers.portainer-rtr.entrypoints=websecure'
      - 'traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DOMAIN}`)'
      - 'traefik.http.routers.portainer-rtr.tls=true'
      ## Middlewares
      # - 'traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file'
      ## Services
      - 'traefik.http.routers.portainer-rtr.service=portainer-svc'
      - 'traefik.http.services.portainer-svc.loadbalancer.server.port=9000'
      # Edge
      ## Routers
      - 'traefik.http.routers.edge-rtr.entrypoints=websecure'
      - 'traefik.http.routers.edge-rtr.rule=Host(`edge.${DOMAIN}`)'
      - 'traefik.http.routers.edge-rtr.tls=true'
      ## Services
      - 'traefik.http.routers.edge-rtr.service=edge-svc'
      - 'traefik.http.services.edge-svc.loadbalancer.server.port=8000'
